# AI Text Humanizer - Complete English Instructions

## Overview
Create a Python program that takes AI-generated text and transforms it to appear more human-written, helping it bypass AI detection tools.

## Required Libraries
- Import these Python libraries: re, random, string, typing (List, Dict, Tuple), json
- Try to import nltk for natural language processing (with error handling if not available)
- Try to import requests for API calls (with error handling if not available)

## Main Class: AITextHumanizer

### Class Initialization
When creating the class:
1. Accept an optional Groq API key parameter
2. Set the Groq API URL to "https://api.groq.com/openai/v1/chat/completions"
3. If NLTK is available, download required data files ('punkt' and 'wordnet')

### Define AI Phrases to Replace
Create a list of common AI phrases that sound robotic:
- "It's important to note that"
- "It's worth mentioning"
- "Furthermore"
- "Moreover" 
- "Additionally"
- "In conclusion"
- "To summarize"
- "Overall"
- "Ultimately"
- "It's crucial to understand"
- "significantly"
- "substantially"
- "considerably"
- "tremendously"

### Define Human-like Replacements
Create a dictionary mapping AI phrases to casual alternatives:
- "It's important to note that" → ["Here's the thing:", "What I've noticed is", "Something interesting is"]
- "Furthermore" → ["Also", "Plus", "And", "What's more"]
- "Moreover" → ["Also", "Plus", "And another thing"]
- "Additionally" → ["Also", "Plus", "And"]
- "In conclusion" → ["So", "Bottom line", "What it comes down to"]
- "To summarize" → ["So basically", "In short", "Here's what it boils down to"]
- "Overall" → ["All in all", "When you step back", "Looking at the big picture"]
- "Ultimately" → ["At the end of the day", "When push comes to shove", "What really matters"]
- "significantly" → ["a lot", "quite a bit", "really", "pretty much"]
- "substantially" → ["a lot", "quite a bit", "really"]
- "considerably" → ["quite a bit", "a lot", "pretty much"]
- "tremendously" → ["a ton", "massively", "big time"]

### Define Contractions
Create a dictionary of formal phrases to casual contractions:
- "do not" → "don't"
- "does not" → "doesn't"
- "will not" → "won't"
- "cannot" → "can't"
- "is not" → "isn't"
- "are not" → "aren't"
- "I am" → "I'm"
- "you are" → "you're"
- "he is" → "he's"
- "she is" → "she's"
- "it is" → "it's"
- "we are" → "we're"
- "they are" → "they're"
- "I have" → "I've"
- "you have" → "you've"
- "I will" → "I'll"
- "you will" → "you'll"
- And so on for all common contractions

## Method 1: Add Human Imperfections
Function that takes text and adds natural human speech patterns:
1. Split text into sentences
2. For each sentence, randomly (10% chance):
   - Add filler words like "honestly", "actually", "really", "basically", "pretty much", "kind of", "sort of"
   - Insert the filler word at a random position in the sentence
3. Randomly (5% chance) add casual interjections:
   - Add phrases like "you know", "I mean", "right", "yeah" at the end of sentences
4. Return the modified text

## Method 2: Vary Sentence Structure
Function that changes sentence patterns to be less predictable:
1. Split text into sentences
2. For each sentence, randomly (20% chance):
   - If sentence starts with "The" or "This", replace with variations like "When you look at", "If you consider", "Looking at"
3. Randomly (10% chance) add sentence fragments:
   - Add short phrases like "Simple as that.", "Period.", "End of story.", "That's it."
4. Return the modified text

## Method 3: Replace AI Phrases
Function that swaps robotic phrases with human alternatives:
1. Go through each AI phrase in the predefined list
2. If the phrase exists in the text, replace it with a randomly chosen human alternative
3. Return the updated text

## Method 4: Add Contractions
Function that makes text more casual:
1. Go through each formal phrase in the contractions dictionary
2. Replace it with the casual version (case-insensitive)
3. Return the updated text

## Method 5: Add Personal Touches
Function that adds personal opinions and experiences:
1. Split text into sentences
2. For each sentence, randomly (15% chance):
   - Add personal starters like "I think", "I believe", "In my opinion", "From my experience", "I've found that", "What I've noticed is", "Personally"
   - Restructure the sentence to include the personal touch
3. Return the modified text

## Method 6: Adjust Vocabulary
Function that replaces sophisticated words with simpler ones:
1. Create a dictionary of complex words and their simple alternatives:
   - "utilize" → "use"
   - "implement" → "do"
   - "facilitate" → "help"
   - "optimize" → "improve"
   - "enhance" → "make better"
   - "demonstrate" → "show"
   - "subsequent" → "next"
   - "commence" → "start"
   - "accomplish" → "do"
   - "beneficial" → "helpful"
   - "challenging" → "hard"
   - "comprehensive" → "complete"
   - "innovative" → "new"
   - "effective" → "good"
   - "efficient" → "quick"
2. Replace each complex word with its simple alternative
3. Return the updated text

## Method 7: Add Typos and Corrections
Function that adds subtle self-corrections (sparingly):
1. Very rarely (5% chance), add self-corrections like:
   - "wait, I mean"
   - "actually, let me rephrase that"
   - "sorry, what I meant was"
   - "I should clarify"
2. Insert these corrections mid-sentence to show natural human thought process
3. Return the modified text

## Method 8: Humanize with Groq API
Function that uses AI to further humanize the text:
1. If Groq API key is provided, create a prompt asking to rewrite the text more naturally
2. Send the request to Groq API with specific instructions:
   - Use conversational tone
   - Add personal touches
   - Use contractions and casual language
   - Vary sentence structure
   - Remove formal language
   - Add minor imperfections
   - Use simpler vocabulary
3. Return the AI-improved version, or original text if API fails

## Main Method: Humanize Text
The primary function that combines all techniques:
1. Accept parameters:
   - text: the AI-generated text to humanize
   - use_groq: whether to use Groq API (optional)
   - intensity: how much to humanize ("light", "medium", "heavy")

2. Apply transformations based on intensity level:
   - Medium/Heavy: Replace AI phrases, add contractions, adjust vocabulary
   - Heavy only: Add personal touches, human imperfections, vary sentence structure, add typos/corrections

3. If use_groq is True, also apply Groq API humanization

4. Return a dictionary containing:
   - original: the input text
   - humanized: the transformed text
   - changes_made: list of what modifications were applied

## Helper Method: Analyze Changes
Function that compares original and humanized text:
1. Check if word count changed
2. Check if contractions were added (count apostrophes)
3. Check if AI phrases were replaced
4. Check if personal opinions were added
5. Return a list of changes made

## Batch Processing Method
Function to humanize multiple texts at once:
1. Accept a list of texts
2. Apply humanization to each text using the same parameters
3. Return a list of results

## Usage Example
Create example code showing:
1. How to initialize the class with optional Groq API key
2. How to use the main humanize_text method
3. How to access the results
4. How to see what changes were made

## Error Handling
Throughout the code, include proper error handling for:
- Missing libraries (NLTK, requests)
- API failures
- Invalid input text
- Network issues

## Configuration Options
Allow users to customize:
- Intensity levels (light, medium, heavy)
- Whether to use Groq API
- Batch processing capabilities
- Analysis of changes made

This program essentially takes robotic AI text and makes it sound like a real person wrote it by removing formal language, adding casual speech patterns, including personal opinions, and introducing natural human imperfections that AI detection tools look for.